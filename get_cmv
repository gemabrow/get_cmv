#!/usr/bin/env python3
from datetime import datetime
import argparse
import os.path
from html_to_data import DATA_EXT, fetch_data
import pandas


def main():
    args = _parse_arguments_()
    commodity_df = get_local_data(args)

    # indices are reversed due to chronological ordering
    commodity_df = commodity_df.loc[args.end_date:args.start_date]
    # get and format mean/variance of price for specified time range
    mean_var_result = mean_variance(commodity_df, 'Price')
    print("\n {0} commodity: {1} \n".format(mean_var_result, args.commodity))


def mean_variance(pd_df, col):
    """ Given a Pandas.DataFrame, calculates the mean and variance of
        the given column of pd_df.
        Args:
            pd_df: a Pandas.DataFrame object
            col:   a string determining the targeted column of pd_df
                   for calculating the mean and variance of column values
                   assumes pd_df[col] will be valid for determining
                   mean and variance
        Returns:
            a formatted string displaying in USD the mean and variance of
            pd_df[col]
    """
    mean = pd_df[col].mean()
    variance = pd_df[col].var()
    return " mean: ${0:,.2f} | variance: ${1:,.2f} |".format(mean, variance)


def get_local_data(args):
    """ If no local data or update flag passed, retrieves data
        Otherwise, restores local data from Pickle to Pandas.DataFrame

        Args:
            args: command line argument with args.commodity used for specified
                  commodity
        Returns:
            Pandas.DataFrame object of commodity data restored from pickling
    """
    data_filename = args.commodity + DATA_EXT
    no_local_data = os.path.isfile(data_filename) is False

    # if update requested or no local data, retrieve data
    if args.update or no_local_data:
        fetch_data()

    return pandas.read_pickle(data_filename)


def _parse_arguments_():
    parser = argparse.ArgumentParser(prog="get_cmv",
                                     usage="%(prog)s start_date end_date "
                                           "commodity",
                                     description="Calculates the mean and "
                                                 "variance of a commodity "
                                                 "over the inputted time frame"
                                     )

    parser.add_argument("-u", "--update",
                        help="update local data",
                        action="store_true")

    parser.add_argument("start_date",
                        help="a date in the format YYYY-MM-DD",
                        type=_valid_date_)

    parser.add_argument("end_date",
                        help="a date in the format YYYY-MM-DD occurring after the start date",
                        type=_valid_date_)

    parser.add_argument("commodity",
                        help="a commodity name ('gold' | 'silver')",
                        type=_valid_commodity_)

    arguments = parser.parse_args()
    # check time frame for validity
    if arguments.end_date < arguments.start_date:
        msg = "Invalid Time Frame [{0} --> {1}]: "\
              "Start Date > End Date".format(arguments.start_date, arguments.end_date)
        raise ValueError(msg)

    return arguments


def _valid_commodity_(arg_str):
    if arg_str == "gold" or arg_str == "silver":
        return arg_str
    else:
        msg = "Please indicate 'gold' or 'silver'. "\
              "Not a valid commodity: '{0}'".format(arg_str)
        raise argparse.ArgumentTypeError(msg)


def _valid_date_(s):
    try:
        return datetime.strptime(s, "%Y-%m-%d")
    except ValueError:
        msg = "Not a valid date: '{0}'.".format(s)
        raise argparse.ArgumentTypeError(msg)


if __name__ == "__main__":
    main()
